# -*- coding: utf-8 -*-
"""SỬA LẠI BỘ DATA NEK

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h2-hGWe20jytZYAYMe706a8HFFvqNEVe
"""

import numpy as np
import pandas as pd

#import marketing dataset
from google.colab import drive
drive.mount('/content/drive')
marketing_df = pd.read_csv('/content/drive/My Drive/pre_DWH/RAW/marketing_data_final.csv')
marketing_df.head(10)

marketing_df.info()

##### 1. Add column Complain Code
# Generate Complain_Code
def generate_complain_code(row, letters):
    prefix = 'N' if row['Complain'] == 0 else np.random.choice(letters)
   #st format XXXX: start with 0001
    number = f"{row.name + 1:04d}"
    return f"{prefix}{number}"

# If Complain = 1, Generate "Letter" randomly in list
letters = ['A', 'P', 'S']

# Add New Column
marketing_df['Complain_Code'] = marketing_df.apply(generate_complain_code, axis=1, letters=letters)

# Print Result
print(marketing_df[['Complain', 'Complain_Code']].head(20))

######### 2. Add Colum Complain_Category
# Determine Complain_Category base on first letter of Complain_Code
def determine_complain_category(code):
    if code.startswith('N'):
        return "No Complain"
    elif code.startswith('A'):
        return "Employee Attitude"
    elif code.startswith('P'):
        return "Payment Problem"
    elif code.startswith('S'):
        return "Shipping Issue"
    else:
        return "Other"

# Generate Complain_Category column
marketing_df['Complain_Category'] = marketing_df['Complain_Code'].apply(determine_complain_category)

# Print Results
print(marketing_df[['Complain_Code', 'Complain_Category']].head(10))

#Rename Column
marketing_df.rename(columns={'Complain': 'Complain_Times'}, inplace=True)

print(marketing_df.head())

#####4. Generate Purchase_ID column randomly in [1,2240] without repeating
marketing_df['Purchase_ID'] = np.random.permutation(range(1, 2241))

print(marketing_df[['Purchase_ID']].head())

#####4. Generate Consumption_ID column randomly in [1,2240] without repeating
marketing_df['Consumption_ID'] = np.random.permutation(range(1, 2241))


print(marketing_df[['Consumption_ID']].head())

#####4. Generate Response_ID column randomly in [1,2240] without repeating
marketing_df['Response_ID'] = np.random.permutation(range(1, 2241))

# Kiểm tra kết quả
print(marketing_df[['Response_ID']].head())

####### 5. Create Date_Response
start_date = pd.to_datetime('2015-01-01')
end_date = pd.to_datetime('2015-04-01')

total_days = (end_date - start_date).days

random_days = np.random.randint(0, total_days, size=len(marketing_df))

marketing_df['Date_Response'] = start_date + pd.to_timedelta(random_days, unit='D')

marketing_df[['Date_Response']].head()

#######6. Add Channel_Type

channels = ['Landing Page', 'Website', 'Email', 'Facebook']

marketing_df['Channel_Type'] = np.random.choice(channels, size=len(marketing_df))

print(marketing_df[['Channel_Type']].head())

########## 7. Deal_Storage_ID
marketing_df['Deal_Storage_ID'] = np.random.permutation(range(1, 2241))

# Kiểm tra kết quả
print(marketing_df[['Deal_Storage_ID']].head())

########### 8. Survey_Approach_ID
marketing_df['Survey_Approach_ID'] = np.random.permutation(range(1, 2241))

# Kiểm tra kết quả
print(marketing_df[['Survey_Approach_ID']].head())

# CREATE DATE CLICK
start_date = pd.to_datetime('2014-12-15')
end_date = pd.to_datetime('2014-12-31')

# Tính tổng số ngày trong khoảng thời gian
total_days = (end_date - start_date).days + 1  # +1 để bao gồm cả ngày cuối cùng

# Sinh các ngày ngẫu nhiên
random_days = np.random.randint(0, total_days, size=len(marketing_df))

# Tạo cột Date_Click
marketing_df['Date_Click'] = start_date + pd.to_timedelta(random_days, unit='D')

# Kiểm tra kết quả
print(marketing_df[['Date_Click']].head())

marketing_df.info()

#Transfrom datatype

# Date_Enroll datatype object --> datetime
marketing_df['Date_Enroll'] = pd.to_datetime(marketing_df['Date_Enroll'])

# AcceptedCmp3, AcceptedCmp4, AcceptedCmp5, AcceptedCmp1, AcceptedCmp2, and Response to boolean
campaign_columns = ['AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Response']
marketing_df[campaign_columns] = marketing_df[campaign_columns].astype(bool)

# Re-Check
print(marketing_df.dtypes)

# Re-Arrange
column_order = [
    'User_ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income',
    'Kidhome', 'Teenhome', 'Date_Enroll', 'Recency', 'Country',
    'Complain_Code', 'Complain_Category', 'Complain_Times', 'Purchase_ID',
    'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth',
    'Consumption_ID', 'MntWines', 'MntFruits', 'MntMeats', 'MntFishs',
    'MntSweets', 'MntGolds', 'Response_ID', 'Date_Response', 'AcceptedCmp1',
    'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Response',
    'Survey_Approach_ID', 'Date_Click', 'Channel_Type', 'Deal_Storage_ID', 'NumDealsPurchases'
]


marketing_df = marketing_df[column_order]

marketing_df.head()

# Save to CSV
marketing_df.to_csv('/content/drive/My Drive/DWH_Final/Marketing_Dataset_Full.csv', index=False)

print("DataFrame đã được lưu thành công vào file CSV.")

# Save Customer_file
columns_to_save = [
    "User_ID", "Year_Birth", "Education", "Marital_Status", "Income",
    "Kidhome", "Teenhome", "Date_Enroll", "Recency", "Country"
]


customer_df = marketing_df[columns_to_save]

customer_df.to_csv('/content/drive/My Drive/DWH_Final/Customer.csv', index=False)

print("DataFrame đã được lưu thành công vào file CSV tên là Customer.csv.")

# 1. Save file Complain.csv
complain_columns = ['Complain_Code', 'User_ID', 'Complain_Category', 'Complain_Times']
marketing_df[complain_columns].to_csv('/content/drive/My Drive/DWH_Final/Complain.csv', index=False)

# 2. Save file Purchases.csv
purchase_columns = ['Purchase_ID', 'User_ID', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth']
marketing_df[purchase_columns].to_csv('/content/drive/My Drive/DWH_Final/Purchases.csv', index=False)

# 3. Save file Product_Consumption.csv
product_consumption_columns = ['Consumption_ID', 'User_ID', 'Purchase_ID', 'MntWines', 'MntFruits', 'MntMeats', 'MntFishs', 'MntSweets', 'MntGolds']
marketing_df[product_consumption_columns].to_csv('/content/drive/My Drive/DWH_Final/Product_Consumption.csv', index=False)

# 4. Save file Campaign_Response.csv
campaign_response_columns = ['Response_ID', 'User_ID', 'Date_Response', 'AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Response']
marketing_df[campaign_response_columns].to_csv('/content/drive/My Drive/DWH_Final/Campaign_Response.csv', index=False)

# 5. Save file Survey_Approach.csv
survey_approach_columns = ['Survey_Approach_ID', 'Response_ID', 'Date_Click', 'Channel_Type']
marketing_df[survey_approach_columns].to_csv('/content/drive/My Drive/DWH_Final/Survey_Approach.csv', index=False)

# 6. Svae file Deals.csv
# Note: Assuming Deal_Storage_ID is a typo and you meant Deals_Sum_ID, if not, please adjust accordingly.
deals_columns = ['Deal_Storage_ID', 'Purchase_ID', 'User_ID', 'NumDealsPurchases']
marketing_df[deals_columns].to_csv('/content/drive/My Drive/DWH_Final/Deals.csv', index=False)

#import marketing dataset
from google.colab import drive
drive.mount('/content/drive')
Customer_df = pd.read_csv('/content/drive/My Drive/DWH_Final/Customer.csv')
Complain_df = pd.read_csv('/content/drive/My Drive/DWH_Final/Complain.csv')
Purchases_df = pd.read_csv('/content/drive/My Drive/DWH_Final/Purchases.csv')
Product_Consumption_df = pd.read_csv('/content/drive/My Drive/DWH_Final/Product_Consumption.csv')
Campaign_Response_df = pd.read_csv('/content/drive/My Drive/DWH_Final/Campaign_Response.csv')
Survey_Approach_df = pd.read_csv('/content/drive/My Drive/DWH_Final/Survey_Approach.csv')
Deals_df = pd.read_csv('/content/drive/My Drive/DWH_Final/Deals.csv')

Marketing_Dataset_Full_df=pd.read_csv('/content/drive/My Drive/DWH_Final/Marketing_Dataset_Full.csv')

Marketing_Dataset_Full_df.head()
Customer_df.head()
Complain_df.head()
Purchases_df.head()
Product_Consumption_df.head()
Campaign_Response_df.head()
Survey_Approach_df.head()
Deals_df.head()

Marketing_Dataset_Full_df.info()
Customer_df.info()
Complain_df.info()
Purchases_df.info()
Product_Consumption_df.info()
Campaign_Response_df.info()
Survey_Approach_df.info()
Deals_df.info()