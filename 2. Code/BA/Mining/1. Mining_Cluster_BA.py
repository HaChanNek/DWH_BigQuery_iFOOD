# -*- coding: utf-8 -*-
"""Clustering_Kmeans_Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Rw-ceDxH1lzS_G6n1SXWYPwHE87Mqqp
"""

# Pip lib
!pip install --upgrade google-cloud-bigquery
!pip install --upgrade google-auth
!pip install --upgrade google-auth-oauthlib
!pip install scikit-learn pandas

# import lib
from google.colab import auth
auth.authenticate_user()


from google.cloud import bigquery
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Create client for BQ
client = bigquery.Client(project='datawarehouse-422504')

# Query from BigQuery
query = """
SELECT User_ID, Recency, Complain_Times, NumWebVisitsMonth, Total_Purchases, Total_Spent, Overall_Accept_Campaign, NumDealsPurchases, Response
FROM `datawarehouse-422504.OLAP.fact_MarketingCampaignResponse`
"""
df = client.query(query).to_dataframe()

# Processing data
X = df[['Recency', 'Complain_Times', 'NumWebVisitsMonth', 'Total_Purchases', 'Total_Spent', 'Overall_Accept_Campaign', 'NumDealsPurchases']]

# data standard
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# optimize cluster_num ussing elbow
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# elbow_graph
plt.figure(figsize=(10, 5))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# train model KMeans with optimized cluster_num
kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=42)
y_kmeans = kmeans.fit_predict(X_scaled)

# add in label to DataFrame
df['Cluster'] = y_kmeans

# Cluster_summary
cluster_summary = df.groupby('Cluster').mean()
print("Cluster Summary:\n", cluster_summary)

# Push result back to BigQuery
# Table existed or not
table_id = "datawarehouse-422504.OLAP.Clustered_Customers"

try:
    client.get_table(table_id)
    print("Existed. Replaced.")
    job_config = bigquery.LoadJobConfig(write_disposition=bigquery.WriteDisposition.WRITE_TRUNCATE)
except:
    print("Not exist. Create new.")
    job_config = bigquery.LoadJobConfig(write_disposition=bigquery.WriteDisposition.WRITE_APPEND)


job = client.load_table_from_dataframe(df, table_id, job_config=job_config)
job.result()

print("Successfull")

import matplotlib.pyplot as plt
import seaborn as sns

# Count the number of customers in each cluster
cluster_counts = df['Cluster'].value_counts().sort_index()

# Set style
sns.set(style="whitegrid")

# Visualize the distribution of clusters
plt.figure(figsize=(12, 6))
sns.barplot(x=cluster_counts.index, y=cluster_counts.values, palette="viridis")

# Add titles and labels with improved font
plt.title('Distribution of Clusters', fontsize=16, fontweight='bold')
plt.xlabel('Cluster', fontsize=14, fontweight='bold')
plt.ylabel('Number of Customers', fontsize=14, fontweight='bold')

# Add value labels on top of each bar
for index, value in enumerate(cluster_counts.values):
    plt.text(index, value + 20, str(value), ha='center', fontsize=12, fontweight='bold')

# Enhance the layout
plt.tight_layout()

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Set style and palette
sns.set(style="whitegrid", palette="pastel")

# Visualize cluster characteristics using box plots
plt.figure(figsize=(18, 12))
columns = ['Recency', 'Complain_Times', 'NumWebVisitsMonth', 'Total_Purchases', 'Total_Spent', 'Overall_Accept_Campaign', 'NumDealsPurchases']
for i, column in enumerate(columns, 1):
    plt.subplot(3, 3, i)
    sns.boxplot(x='Cluster', y=column, data=df)
    plt.title(f'Cluster-wise Distribution of {column}', fontsize=14, fontweight='bold')
    plt.xlabel('Cluster', fontsize=12)
    plt.ylabel(column, fontsize=12)

plt.tight_layout()
plt.suptitle('Cluster Characteristics', fontsize=16, fontweight='bold', y=1.02)
plt.savefig('/content/cluster_characteristics.png', dpi=300)
plt.show()
from google.colab import files
files.download('/content/cluster_characteristics.png')

# Summarize the characteristics of each cluster
cluster_summary = df.groupby('Cluster').mean()

# Display the cluster summary
print("Cluster Summary:\n", cluster_summary)

# Save the cluster summary to a CSV file
cluster_summary.to_csv('cluster_summary.csv', index=True)

# Download the CSV file
from google.colab import files
files.download('cluster_summary.csv')